#!/usr/bin/env python3
import sys
import subprocess
IAM_VERSION = "v1.1.1"

def run_git_command(*args):
    result = subprocess.run(["git"] + list(args), capture_output=True, text=True)
    if result.returncode != 0:
        print(f"‚ùå Error: {result.stderr.strip()}")
    else:
        print(result.stdout.strip())

def get_current_branch():
    result = subprocess.run(["git", "rev-parse", "--abbrev-ref", "HEAD"], capture_output=True, text=True)
    return result.stdout.strip()

def is_branch_tracked(branch_name):
    result = subprocess.run(["git", "rev-parse", "--symbolic-full-name", "--verify", f"{branch_name}@{{u}}"],
                            capture_output=True, text=True)
    return result.returncode == 0

def safe_git_push():
    branch = get_current_branch()
    print(f"üöÄ Current branch: {branch}")
    if is_branch_tracked(branch):
        print(f"üì° Branch '{branch}' is already tracked. Pushing...")
        run_git_command("push")
        print(f"‚úÖ Branch '{branch}' completed pushed.")
    else:
        print(f"üîß Branch '{branch}' is not tracked. Setting upstream and pushing...")
        run_git_command("push", "-u", "origin", branch)

def sprint_finish(branch_target):
    current_branch = get_current_branch()

    if not current_branch.startswith("sprint/"):
        print("‚ùå You must stay at 'sprint/*' for finish this sprint.")
        sys.exit(1)

    print(f"üîÑ Finishing sprint: {current_branch}")

    # Checkout ke development
    run_git_command("checkout", branch_target)

    # Pull update development
    run_git_command("pull", "origin", branch_target)

    # Merge sprint ke development
    run_git_command("merge", "--no-ff", current_branch)

    # Push hasil merge
    run_git_command("push", "origin", branch_target)

    # Hapus branch lokal
    run_git_command("branch", "-d", current_branch)

    # Hapus branch remote
    run_git_command("push", "origin", "--delete", current_branch)

    print(f"‚úÖ Sprint {current_branch} finished merged into {branch_target} as well removed from local & remote.")

def feature_finish(branch_target):
    current_branch = get_current_branch()

    if not current_branch.startswith("feature/"):
        print("‚ùå You need to be in branch 'feature/*' for complete the feature.")
        sys.exit(1)

    print(f"üöÄ finishing the feature: {current_branch}")

    # Checkout ke develop
    run_git_command("checkout", branch_target)
    run_git_command("pull", "origin", branch_target)

    # Merge feature ke develop
    run_git_command("merge", "--no-ff", current_branch)

    # Push hasil merge
    run_git_command("push", "origin", branch_target)

    # Hapus branch lokal & remote
    run_git_command("branch", "-D", current_branch)
    run_git_command("push", "origin", "--delete", current_branch)

    print(f"‚úÖ Feature {current_branch} finished and merged to '{branch_target}' as well removed from local & remote..")

def git_pr_command(*args):
    if len(args) < 5:
        print("‚ùå Argument not complete. use format: <platform> <source> <target> <title> <body>")
        return

    platform = args[0]
    source = args[1].replace(" ", "-")
    target = args[2].replace(" ", "-")
    title = args[3]
    body = args[4]
    print(f"üöÄ Creating PR for {platform} from {source} to {target} with title {title}")

     # Pull update target
    run_git_command("pull", "origin", source)

    if platform == "gh":
        command = [
            "gh", "pr", "create",
            "--base", target,
            "--head", source,
            "--title", f"{title}",
            "--body", f"{body}"
        ]

        subprocess.run(command)
    elif platform == "glab":
        command = [
            "glab", "mr", "create",
            "--source", source,
            "--target", target,
            "--title", title,
            "--description", body
        ]
        subprocess.run(command)
    else:
        print("‚ùå Platform only supported by gh(github) or glab(gitlab).")

def init():
    run_git_command("init")

def create_sprint(name):
    branch = name.strip().replace(" ", "-")  # Hilangkan spasi awal/akhir, ganti spasi jadi "-"
    
    print(f"üöÄ Make new sprint: sprint/{branch}")

    # Checkout ke master dan update dulu
    run_git_command("checkout", "master")
    run_git_command("pull", "origin", "master")

    # Buat branch sprint baru dari master
    run_git_command("checkout", "-b", f"sprint/{branch}")

    # Push branch sprint ke remote
    run_git_command("push", "-u", "origin", f"sprint/{branch}")


def create_feature(*args):
    if len(args) == 2 and args[0] == "sprint":
        sprint_name = args[1].replace(" ", "-")
        print(f"üöÄ pull sprint: sprint/{sprint_name}")

        run_git_command("checkout", f"sprint/{sprint_name}")
        run_git_command("pull", "origin" , f"sprint/{sprint_name}")
    elif len(args) == 1:
        feature_name = args[0].replace(" ", "-")
        print(f"üöÄ make feature branch: feature/{feature_name}")

        run_git_command("checkout", "-b", f"feature/{feature_name}")

        # Push branch feature ke remote
        run_git_command("push", "-u", "origin", f"feature/{feature_name}")
    else:
        print("‚ùå Argumen tidak valid. Gunakan:\n - feature_name\n - sprint, feature_name")

def create_hotfix(name):
    branch = name.replace(" ", "-")
    print(f"üî• Make new hotfix: hotfix/{branch}")

    # Checkout ke master dan update dulu
    run_git_command("checkout", "master")
    run_git_command("pull", "origin")

    # Buat branch hotfix baru dari master
    run_git_command("checkout","-b", f"hotfix/{branch}")

    # Push branch hotfix ke remote
    run_git_command("push", "-u", "origin", f"hotfix/{branch}")

def create_fix(*args):
    target_branch = args[0].replace(" ", "-") 
    fix_branch = args[1].replace(" ", "-") 

    if(target_branch != "master"):
        print(f"üî• Make new fix branch: fix/{fix_branch}")
        run_git_command("checkout", f"{target_branch}")
        run_git_command("pull", "origin")
        run_git_command("checkout", "-b", f"fix/{fix_branch}")
        run_git_command("push", "-u", "origin", f"fix/{fix_branch}")

    else:
        print("‚ùå Fix branch not for master")

def create_commit(message):
    if len(message) > 50:
        print("‚ùå Commit message max 50 characters.")
    else:
        run_git_command("commit", "-m", message)

def help_message():
    print("""
git-iam is a tool to help you manage your git workflow.
Usage: git-iam [options]
    Init                        init the project
    Sprint <name>               create a sprint branch from master
    feature <name>              create a feature branch from sprint
    hotfix <name>               create a hotfix branch from master
    sprint-finish               sprint finish, delete branch sprint in local and remote
    feature-finish               sprint finish, delete branch sprint in local and remote
    commit <message>            create a commit
    pr/mr                       create a pull request or merge request
    log                         show the log of your branch
    help                        show this help message
    push                        push branch to remote
    version                     show the version of git-iam
  """)
    
def git_iam():
    print("Menu Git IAM:")
    print('1. Create your sprint')
    print('2. Create your feature')
    print('3. Create your hotfix')
    print('4. Create your fix')
    print('5. Create your commit message')
    print('6. Create pull request or merge request')
    print('7. show log')
    print('8. Sprint-finish')
    print('9. Feature-finish')
    print('10. exit')

    arg = input('Input your choice: ')
    if (arg == '1'):
        create_sprint(input("sprint name[sprint/]: "))
    elif(arg == '2'):
        create_feature("sprint",input("from sprint name[sprint/]: "))
        create_feature(input("feature name[feature/]: "))
    elif (arg == '3'):
        create_hotfix(input("hotfix name[hotfix/]: "))
    elif (arg == '4'):
        target_branch = input("target branch: ")
        fix_branch = input("fix branch[fix/]: ")
        create_fix(target_branch, fix_branch)
    elif (arg == '5'):
        create_commit(input("commit message[max-50 characters]: "))
    elif (arg == '6'):
        platform = input("PR platform(gh/glab): ")
        source = input("PR source: ")
        target = input("PR target: ")
        title = input("PR title: ")
        body = input("PR description: ")
        git_pr_command(platform, source, target, title, body)
    elif (arg == '7'):
        run_git_command("log", "--oneline", "--graph", "--all", "--decorate")
    elif (arg == '8'):
        target_branch = input("Input your target branch: ")
        sprint_finish(target_branch)
    elif (arg == '9'):
        target_branch = input("Input your target branch: ")
        feature_finish(target_branch)
    elif (arg == '10'):
        print("Goodbye!")
        sys.exit(0)
    else:
        help_message()

if __name__ == "__main__":
    try:
        if len(sys.argv) < 2:
            git_iam()
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚ùå Cancelled by user (Ctrl+C).")
        sys.exit(0)

cmd = sys.argv[1]

try:
    if (cmd == 'init'):
        init()
    elif (cmd == 'sprint'):
        create_sprint(input("Input sprint name[sprint/]: "))
    elif (cmd == 'feature'):
        sprint_name = input("Input from sprint name[sprint/]: ")
        feature_name = input("Input your feature name[feature/]: ")
        create_feature("sprint", sprint_name)
        create_feature(feature_name)
    elif cmd in ['help', "--help"]:
        help_message()
    elif cmd in ["version", "v" ,"V" ,"--version", "-V"]: 
        print(f"git-iam version: {IAM_VERSION}")
    elif cmd == "commit":
        create_commit(input("commit message[max-50 characters]: "))
    elif cmd == "push":
        safe_git_push()
    elif cmd == "log":
        run_git_command("log", "--oneline", "--graph", "--all", "--decorate")
    elif cmd == "sprint-finish":
        target_branch = input("Input your target branch: ")
        sprint_finish(target_branch)
    elif cmd == "feature-finish":
        target_branch = input("Input your target branch: ")
        feature_finish(target_branch)
    elif cmd == "hotfix":
        create_hotfix(input("Input your hotfix name[hofix/]: "))
    elif cmd == "fix":
        target_branch = input("Input your target branch: ")
        fix_branch = input("Input your fix branch[fix/]: ")
        create_fix(target_branch, fix_branch)
    elif cmd in ["pr", "mr"]:
        platform = input("Input your PR platform(gh/glab): ")
        source = input("Input your PR source: ")
        target = input("Input your PR target: ")
        title = input("Input your PR title: ")
        body = input("Input your PR description: ")
        git_pr_command(platform, source, target, title, body)
    else:
        print('‚ùå Command not support')
except KeyboardInterrupt:
    print("\n‚ùå Cancelled by user (Ctrl+C).")
    sys.exit(0)